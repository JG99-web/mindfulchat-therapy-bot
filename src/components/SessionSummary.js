'use client';

import { useState } from 'react';
import { Download, Star, CheckCircle, Copy, X } from 'lucide-react';

export default function SessionSummary({ 
  messages, 
  isVisible, 
  onClose, 
  userName, 
  selectedPersona,
  sessionStartTime 
}) {
  const [copiedText, setCopiedText] = useState('');

  if (!isVisible) return null;

  const generateSummary = () => {
    const userMessages = messages.filter(m => m.sender === 'user');
    const aiMessages = messages.filter(m => m.sender === 'assistant');
    
    // Extract key themes
    const themes = extractThemes(userMessages);
    
    // Find helpful AI responses (longer, more detailed ones)
    const keyInsights = aiMessages
      .filter(m => m.text.length > 200)
      .slice(-3) // Last 3 substantial responses
      .map(m => m.text.substring(0, 150) + '...');
    
    // Generate action items
    const actionItems = extractActionItems(aiMessages);
    
    // Calculate session duration
    const duration = sessionStartTime ? 
      Math.round((Date.now() - sessionStartTime) / 60000) : 0;
    
    return {
      themes,
      keyInsights,
      actionItems,
      stats: {
        duration: `${duration} minutes`,
        messageCount: userMessages.length,
        persona: selectedPersona
      }
    };
  };

  const extractThemes = (userMessages) => {
    const text = userMessages.map(m => m.text.toLowerCase()).join(' ');
    const themes = [];
    
    if (text.includes('work') || text.includes('job')) themes.push('Work & Career');
    if (text.includes('family') || text.includes('parent')) themes.push('Family Relationships');
    if (text.includes('anxious') || text.includes('anxiety')) themes.push('Anxiety Management');
    if (text.includes('sad') || text.includes('depressed')) themes.push('Depression & Mood');
    if (text.includes('relationship') || text.includes('partner')) themes.push('Relationships');
    if (text.includes('sleep') || text.includes('tired')) themes.push('Sleep & Rest');
    if (text.includes('stress') || text.includes('pressure')) themes.push('Stress Management');
    
    return themes.slice(0, 3); // Top 3 themes
  };

  const extractActionItems = (aiMessages) => {
    const actionItems = [];
    const text = aiMessages.map(m => m.text).join(' ');
    
    // Look for action-oriented suggestions
    const suggestions = [
      { pattern: /try.*breathing|practice.*breathing/i, item: 'Practice breathing exercises daily' },
      { pattern: /journaling|write.*down|keep.*journal/i, item: 'Start a daily journal practice' },
      { pattern: /exercise|physical.*activity|go.*walk/i, item: 'Incorporate regular physical activity' },
      { pattern: /sleep.*routine|bedtime|sleep.*schedule/i, item: 'Establish a consistent sleep routine' },
      { pattern: /talk.*someone|reach.*out|support/i, item: 'Connect with trusted friends or family' },
      { pattern: /mindfulness|meditation|present.*moment/i, item: 'Practice mindfulness or meditation' },
      { pattern: /professional.*help|therapist|counselor/i, item: 'Consider professional therapy support' }
    ];
    
    suggestions.forEach(({ pattern, item }) => {
      if (pattern.test(text) && actionItems.length < 4) {
        actionItems.push(item);
      }
    });
    
    return actionItems;
  };

  const summary = generateSummary();

  const copyToClipboard = async (text) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedText(text);
      setTimeout(() => setCopiedText(''), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const exportSummary = () => {
    const summaryText = `
Session Summary - ${new Date().toLocaleDateString()}
${userName ? `Name: ${userName}` : 'Anonymous Session'}
Therapist: ${selectedPersona}
Duration: ${summary.stats.duration}
Messages: ${summary.stats.messageCount}

Key Themes Discussed:
${summary.themes.map(theme => `• ${theme}`).join('\n')}

Action Items to Consider:
${summary.actionItems.map(item => `• ${item}`).join('\n')}

Key Insights:
${summary.keyInsights.map((insight, i) => `${i + 1}. ${insight}`).join('\n\n')}

---
Generated by MindfulAI Therapy Bot
Remember: This is AI-generated content and not a replacement for professional mental health care.
    `;
    
    const blob = new Blob([summaryText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `therapy-session-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <div>
              <h2 className="text-xl font-semibold text-gray-900">Session Summary</h2>
              <p className="text-sm text-gray-600 mt-1">
                {new Date().toLocaleDateString()} • {summary.stats.duration}
              </p>
            </div>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 transition-colors"
            >
              <X className="h-6 w-6" />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Session Stats */}
          <div className="grid grid-cols-3 gap-4">
            <div className="text-center p-3 bg-blue-50 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">{summary.stats.messageCount}</div>
              <div className="text-sm text-blue-600">Messages</div>
            </div>
            <div className="text-center p-3 bg-green-50 rounded-lg">
              <div className="text-2xl font-bold text-green-600">{summary.stats.duration}</div>
              <div className="text-sm text-green-600">Duration</div>
            </div>
            <div className="text-center p-3 bg-purple-50 rounded-lg">
              <div className="text-lg font-bold text-purple-600 capitalize">{summary.stats.persona}</div>
              <div className="text-sm text-purple-600">Therapist</div>
            </div>
          </div>

          {/* Key Themes */}
          {summary.themes.length > 0 && (
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-3 flex items-center">
                <Star className="h-5 w-5 text-yellow-500 mr-2" />
                Key Themes Discussed
              </h3>
              <div className="flex flex-wrap gap-2">
                {summary.themes.map((theme, index) => (
                  <span
                    key={index}
                    className="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm"
                  >
                    {theme}
                  </span>
                ))}
              </div>
            </div>
          )}

          {/* Action Items */}
          {summary.actionItems.length > 0 && (
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-3 flex items-center">
                <CheckCircle className="h-5 w-5 text-green-500 mr-2" />
                Things to Try
              </h3>
              <ul className="space-y-2">
                {summary.actionItems.map((item, index) => (
                  <li key={index} className="flex items-start">
                    <CheckCircle className="h-4 w-4 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                    <span className="text-sm text-gray-700">{item}</span>
                    <button
                      onClick={() => copyToClipboard(item)}
                      className="ml-2 text-gray-400 hover:text-gray-600"
                    >
                      <Copy className="h-3 w-3" />
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          )}

          {/* Key Insights */}
          {summary.keyInsights.length > 0 && (
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-3">Key Insights</h3>
              <div className="space-y-3">
                {summary.keyInsights.map((insight, index) => (
                  <div key={index} className="p-3 bg-gray-50 rounded-lg">
                    <p className="text-sm text-gray-700">{insight}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="p-6 border-t border-gray-200 bg-gray-50 rounded-b-xl">
          <div className="flex justify-between items-center">
            <p className="text-xs text-gray-500">
              This summary is AI-generated and not a replacement for professional care.
            </p>
            <div className="flex space-x-3">
              <button
                onClick={exportSummary}
                className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
              >
                <Download className="h-4 w-4 mr-2" />
                Export
              </button>
            </div>
          </div>
        </div>

        {/* Copy feedback */}
        {copiedText && (
          <div className="fixed bottom-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg text-sm">
            Copied to clipboard!
          </div>
        )}
      </div>
    </div>
  );
}
